#name: Deploy PRODUCTION Node.js via SSH (with PM2)
#
## Workflow ini akan dijalankan saat ada push ke branch 'main'
## ATAU saat ada rilis baru (tag rilis, misal: v1.0.0)
#on:
#  push:
#    branches:
#      - main # <<<--- SESUAIKAN: Branch production Anda (biasanya 'main' atau 'master')
#  release:
#    types: [published] # Dipicu saat ada rilis baru diterbitkan di GitHub
#
## Sebuah workflow terdiri dari satu atau lebih job
#jobs:
#  deploy:
#    # Environment variables untuk secrets - WAJIB DIATUR DI GITHUB REPOSITORY SECRETS!
#    env:
#      VPS_HOST: ${{ secrets.PROD_VPS_HOST }}
#      VPS_USER: ${{ secrets.PROD_VPS_USER }}
#      VPS_SSH_KEY: ${{ secrets.PROD_VPS_SSH_KEY }}
#      VPS_PORT: ${{ secrets.PROD_VPS_PORT }}
#
#    # Job ini akan berjalan di runner Ubuntu terbaru yang disediakan GitHub
#    runs-on: ubuntu-latest
#
#    # --- Opsional: Langkah Manual Approval (SANGAT DIREKOMENDASIKAN UNTUK PRODUCTION) ---
#    # Jika Anda ingin persetujuan manual sebelum deploy ke produksi, uncomment bagian ini.
#    # environment:
#    #   name: production
#    #   url: https://your-production-app-url.com # <<<--- SESUAIKAN: URL aplikasi produksi Anda
#
#    # Langkah-langkah (steps) yang akan dijalankan di dalam job
#    steps:
#      # Langkah 1: Validasi GitHub Secrets Production
#      - name: Validasi GitHub Secrets
#        run: |
#          echo "🔍 Validasi secrets untuk lingkungan produksi..."
#          REQUIRED_SECRETS=("VPS_HOST" "VPS_USER" "VPS_SSH_KEY" "VPS_PORT")
#          for secret in "${REQUIRED_SECRETS[@]}"; do
#            if [ -z "${!secret}" ]; then
#              echo "❌ ERROR: Secret $secret belum tersedia di GitHub Settings untuk produksi! Workflow dihentikan."
#              exit 1
#            fi
#          done
#
#      # Langkah 2: Checkout kode dari repositori
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      # Langkah 3: Menyiapkan lingkungan Node.js (di runner GitHub Actions, BUKAN server target)
#      # Ini untuk memastikan 'npm run build' dan 'npm ci' bisa jalan di runner sebelum SSH
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20' # <<<--- SESUAIKAN dengan versi Node.js yang Anda gunakan
#          cache: 'npm' # Mengaktifkan caching npm untuk mempercepat instalasi dependensi
#
#      # Langkah 4: Menginstal dependensi dan membangun proyek secara lokal di runner GitHub Actions
#      # Tujuannya adalah untuk memastikan build sukses sebelum dikirim ke server.
#      - name: Install dependencies and Build project locally
#        run: |
#          npm ci --production # Hanya install dependensi produksi
#          npm run build
#
#      # Langkah 5: Deploy Aplikasi via SSH
#      # Menggunakan action 'appleboy/ssh-action' untuk menjalankan perintah SSH di server Anda.
#      - name: Deploy Aplikasi via SSH
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.PROD_VPS_HOST }}
#          username: ${{ secrets.PROD_VPS_USER }}
#          key: ${{ secrets.PROD_VPS_SSH_KEY }}
#          port: ${{ secrets.PROD_VPS_PORT }}
#          script: |
#            set -e
#
#            # --- Konfigurasi Server Produksi Anda (WAJIB SESUAIKAN INI!) ---
#            # Path absolut ke direktori aplikasi Anda di server produksi
#            APP_DIR="/var/www/your_express_app_production" # <<<--- SESUAIKAN
#            # Nama unik untuk aplikasi di PM2
#            APP_NAME="your_app_production" # <<<--- SESUAIKAN
#            # Versi Node.js yang ingin Anda gunakan di NVM di server produksi
#            NVM_VERSION="20" # <<<--- SESUAIKAN
#            # Perintah untuk memulai aplikasi Anda (sesuai dengan script 'start' di package.json)
#            APP_START_COMMAND="npm run start" # <<<--- SESUAIKAN (misal: 'node dist/server.js')
#            # ------------------------------------------------
#
#            # --- Inisialisasi NVM di Server ---
#            export NVM_DIR="$HOME/.nvm"
#            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
#
#            echo "📦 [1/7] Memastikan direktori aplikasi ada..."
#            if [ ! -d "$APP_DIR" ]; then
#              echo "📂 Direktori aplikasi tidak ditemukan, melakukan cloning awal..."
#              # Ganti URL repositori GitHub Anda di sini!
#              git clone https://github.com/your_github_username/your_repo_name.git "$APP_DIR" # <<<--- SESUAIKAN
#            fi
#
#            # Masuk ke direktori aplikasi
#            cd "$APP_DIR"
#
#            echo "🚀 [2/7] Memuat NVM dan menginstal/menggunakan Node.js version $NVM_VERSION..."
#            nvm install "$NVM_VERSION"
#            nvm use "$NVM_VERSION"
#
#            echo "⬇️ [3/7] Menarik perubahan terbaru dari branch production..."
#            git config --global --add safe.directory "$APP_DIR"
#            git pull origin main # Menggunakan branch production Anda
#
#            echo "🛠️ [4/7] Menginstal atau memperbarui dependensi NPM (hanya production dependencies)..."
#            npm install --production
#
#            echo "🏗️ [5/7] Membangun proyek TypeScript..."
#            npm run build
#
#            echo "🔄 [6/7] Melakukan Deploy dengan PM2 (reload tanpa downtime)..."
#            # PM2 reload akan mencoba me-restart graceful. Jika ada error, ia akan kembali ke versi lama.
#            # Ini sangat bagus untuk produksi.
#            pm2 reload ${APP_NAME} || pm2 start "$APP_START_COMMAND" --name "$APP_NAME" --log-date-format "YYYY-MM-DD HH:mm:ss"
#
#            # Simpan konfigurasi PM2 agar aplikasi otomatis restart setelah reboot server
#            echo "💾 Menyimpan konfigurasi PM2..."
#            pm2 save
#
#            echo "🔍 [7/7] Verifikasi service PM2 berjalan..."
#            sleep 10 # Beri waktu lebih untuk aplikasi produksi memulai sepenuhnya
#            if ! pm2 status | grep -q "${APP_NAME}.*online"; then
#              echo "❌ Aplikasi ${APP_NAME} gagal berjalan dengan PM2 setelah reload."
#              echo "🚨 Silakan cek log PM2 di server: pm2 logs ${APP_NAME}"
#              # --- Mekanisme Rollback Otomatis Sederhana ---
#              echo "🔁 Mencoba melakukan rollback ke versi PM2 sebelumnya..."
#              # Perintah 'pm2 reload' secara default sudah melakukan rollback jika reload gagal.
#              # Namun, jika 'pm2 start' gagal, tidak ada rollback otomatis di level ini.
#              # Rollback sejati biasanya dengan 'pm2 deploy revert' atau 'git revert'.
#              exit 1 # Kegagalan deploy akan menyebabkan workflow ini gagal.
#            fi
#
#            echo "✅ Deploy ke PRODUCTION selesai tanpa error."